# -*- coding: utf-8 -*-
"""
/***************************************************************************
 layer_counter
                                 A QGIS plugin
 Plugin that count layer loaded in the layer panel.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-30
        copyright            : (C) 2025 by Eagleprojects S.p.A.
        email                : gis@eagleprojects.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject
import os.path


class layer_counter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        # Save reference to the QGIS interface
        self.iface = iface
        # Initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        
        # Declare instance attributes
        self.actions = []
        self.menu = 'Layer Counter'
        self.first_start = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('layer_counter', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True, 
                  add_to_menu=True, add_to_toolbar=True, status_tip=None, 
                  whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar."""
        
        # Use default icon if file doesn't exist
        if not os.path.exists(icon_path):
            icon = QIcon()
        else:
            icon = QIcon(icon_path)
            
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        print("DEBUG: Layer Counter plugin initGui() called")
        
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(
            icon_path,
            text='Layer Counter',
            callback=self.test_function,
            parent=self.iface.mainWindow())

        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        print("DEBUG: Layer Counter plugin unload() called")
        
        # Remove actions
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def test_function(self):
        """Main function that counts layers in the project."""
        from qgis.core import QgsProject
        
        # Count all layers in the project
        total_layers = len(QgsProject.instance().mapLayers())
        
        # Count SELECTED layers (highlighted in blue in the layer panel)
        selected_layers_list = self.iface.layerTreeView().selectedLayers()
        selected_layers = len(selected_layers_list)
        
        # Debug: show which layers are selected
        print("Selected layers:")
        for layer in selected_layers_list:
            print(f"  - {layer.name()}")
        
        # Message with both counts
        message = "Layers in the project: {}\nLayers selected in the project: {}".format(
            total_layers, 
            selected_layers
        )
        
        QMessageBox.information(
            self.iface.mainWindow(), 
            "Layer Counter", 
            message
        )

    def run(self):
        """Run method that calls the main function."""
        self.test_function()